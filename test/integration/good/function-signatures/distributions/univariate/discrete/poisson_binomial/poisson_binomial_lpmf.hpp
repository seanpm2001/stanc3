
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace poisson_binomial_lpmf_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 30> locations_array__ = 
{" (found before start of program)",
 " (in '../stanc3/test/integration/good/function-signatures/distributions/univariate/discrete/poisson_binomial/poisson_binomial_lpmf.stan', line 16, column 2 to column 14)",
 " (in '../stanc3/test/integration/good/function-signatures/distributions/univariate/discrete/poisson_binomial/poisson_binomial_lpmf.stan', line 17, column 2 to column 25)",
 " (in '../stanc3/test/integration/good/function-signatures/distributions/univariate/discrete/poisson_binomial/poisson_binomial_lpmf.stan', line 18, column 2 to column 33)",
 " (in '../stanc3/test/integration/good/function-signatures/distributions/univariate/discrete/poisson_binomial/poisson_binomial_lpmf.stan', line 19, column 2 to column 11)",
 " (in '../stanc3/test/integration/good/function-signatures/distributions/univariate/discrete/poisson_binomial/poisson_binomial_lpmf.stan', line 22, column 2 to column 30)",
 " (in '../stanc3/test/integration/good/function-signatures/distributions/univariate/discrete/poisson_binomial/poisson_binomial_lpmf.stan', line 23, column 2 to column 66)",
 " (in '../stanc3/test/integration/good/function-signatures/distributions/univariate/discrete/poisson_binomial/poisson_binomial_lpmf.stan', line 24, column 2 to column 66)",
 " (in '../stanc3/test/integration/good/function-signatures/distributions/univariate/discrete/poisson_binomial/poisson_binomial_lpmf.stan', line 25, column 2 to column 70)",
 " (in '../stanc3/test/integration/good/function-signatures/distributions/univariate/discrete/poisson_binomial/poisson_binomial_lpmf.stan', line 26, column 2 to column 70)",
 " (in '../stanc3/test/integration/good/function-signatures/distributions/univariate/discrete/poisson_binomial/poisson_binomial_lpmf.stan', line 27, column 2 to column 72)",
 " (in '../stanc3/test/integration/good/function-signatures/distributions/univariate/discrete/poisson_binomial/poisson_binomial_lpmf.stan', line 28, column 2 to column 72)",
 " (in '../stanc3/test/integration/good/function-signatures/distributions/univariate/discrete/poisson_binomial/poisson_binomial_lpmf.stan', line 29, column 2 to column 76)",
 " (in '../stanc3/test/integration/good/function-signatures/distributions/univariate/discrete/poisson_binomial/poisson_binomial_lpmf.stan', line 30, column 2 to column 76)",
 " (in '../stanc3/test/integration/good/function-signatures/distributions/univariate/discrete/poisson_binomial/poisson_binomial_lpmf.stan', line 33, column 2 to column 21)",
 " (in '../stanc3/test/integration/good/function-signatures/distributions/univariate/discrete/poisson_binomial/poisson_binomial_lpmf.stan', line 2, column 2 to column 12)",
 " (in '../stanc3/test/integration/good/function-signatures/distributions/univariate/discrete/poisson_binomial/poisson_binomial_lpmf.stan', line 3, column 8 to column 13)",
 " (in '../stanc3/test/integration/good/function-signatures/distributions/univariate/discrete/poisson_binomial/poisson_binomial_lpmf.stan', line 3, column 2 to column 31)",
 " (in '../stanc3/test/integration/good/function-signatures/distributions/univariate/discrete/poisson_binomial/poisson_binomial_lpmf.stan', line 4, column 2 to column 14)",
 " (in '../stanc3/test/integration/good/function-signatures/distributions/univariate/discrete/poisson_binomial/poisson_binomial_lpmf.stan', line 5, column 9 to column 14)",
 " (in '../stanc3/test/integration/good/function-signatures/distributions/univariate/discrete/poisson_binomial/poisson_binomial_lpmf.stan', line 5, column 2 to column 25)",
 " (in '../stanc3/test/integration/good/function-signatures/distributions/univariate/discrete/poisson_binomial/poisson_binomial_lpmf.stan', line 6, column 13 to column 18)",
 " (in '../stanc3/test/integration/good/function-signatures/distributions/univariate/discrete/poisson_binomial/poisson_binomial_lpmf.stan', line 6, column 2 to column 33)",
 " (in '../stanc3/test/integration/good/function-signatures/distributions/univariate/discrete/poisson_binomial/poisson_binomial_lpmf.stan', line 9, column 2 to column 29)",
 " (in '../stanc3/test/integration/good/function-signatures/distributions/univariate/discrete/poisson_binomial/poisson_binomial_lpmf.stan', line 10, column 2 to column 65)",
 " (in '../stanc3/test/integration/good/function-signatures/distributions/univariate/discrete/poisson_binomial/poisson_binomial_lpmf.stan', line 11, column 2 to column 69)",
 " (in '../stanc3/test/integration/good/function-signatures/distributions/univariate/discrete/poisson_binomial/poisson_binomial_lpmf.stan', line 12, column 2 to column 71)",
 " (in '../stanc3/test/integration/good/function-signatures/distributions/univariate/discrete/poisson_binomial/poisson_binomial_lpmf.stan', line 13, column 2 to column 75)",
 " (in '../stanc3/test/integration/good/function-signatures/distributions/univariate/discrete/poisson_binomial/poisson_binomial_lpmf.stan', line 17, column 9 to column 14)",
 " (in '../stanc3/test/integration/good/function-signatures/distributions/univariate/discrete/poisson_binomial/poisson_binomial_lpmf.stan', line 18, column 13 to column 18)"};



class poisson_binomial_lpmf_model final : public model_base_crtp<poisson_binomial_lpmf_model> {

 private:
  int d_int;
  std::vector<int> d_int_array;
  double d_real;
  Eigen::Matrix<double, -1, 1> d_vector__;
  Eigen::Matrix<double, 1, -1> d_row_vector__;
  double transformed_data_real; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> d_vector{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, 1, -1>> d_row_vector{nullptr, 0};
 
 public:
  ~poisson_binomial_lpmf_model() { }
  
  inline std::string model_name() const final { return "poisson_binomial_lpmf_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = "};
  }
  
  
  poisson_binomial_lpmf_model(stan::io::var_context& context__,
                              unsigned int random_seed__ = 0,
                              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "poisson_binomial_lpmf_model_namespace::poisson_binomial_lpmf_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 15;
      context__.validate_dims("data initialization","d_int","int",
           std::vector<size_t>{});
      d_int = std::numeric_limits<int>::min();
      
      current_statement__ = 15;
      d_int = context__.vals_i("d_int")[(1 - 1)];
      current_statement__ = 16;
      validate_non_negative_index("d_int_array", "d_int", d_int);
      current_statement__ = 17;
      context__.validate_dims("data initialization","d_int_array","int",
           std::vector<size_t>{static_cast<size_t>(d_int)});
      d_int_array = std::vector<int>(d_int, std::numeric_limits<int>::min());
      
      current_statement__ = 17;
      d_int_array = context__.vals_i("d_int_array");
      current_statement__ = 18;
      context__.validate_dims("data initialization","d_real","double",
           std::vector<size_t>{});
      d_real = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 18;
      d_real = context__.vals_r("d_real")[(1 - 1)];
      current_statement__ = 19;
      validate_non_negative_index("d_vector", "d_int", d_int);
      current_statement__ = 20;
      context__.validate_dims("data initialization","d_vector","double",
           std::vector<size_t>{static_cast<size_t>(d_int)});
      d_vector__ = Eigen::Matrix<double, -1, 1>(d_int);
      new (&d_vector) Eigen::Map<Eigen::Matrix<double, -1, 1>>(d_vector__.data(), d_int);
      
      
      {
        std::vector<local_scalar_t__> d_vector_flat__;
        current_statement__ = 20;
        d_vector_flat__ = context__.vals_r("d_vector");
        current_statement__ = 20;
        pos__ = 1;
        current_statement__ = 20;
        for (int sym1__ = 1; sym1__ <= d_int; ++sym1__) {
          current_statement__ = 20;
          assign(d_vector, d_vector_flat__[(pos__ - 1)],
            "assigning variable d_vector", index_uni(sym1__));
          current_statement__ = 20;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 21;
      validate_non_negative_index("d_row_vector", "d_int", d_int);
      current_statement__ = 22;
      context__.validate_dims("data initialization","d_row_vector","double",
           std::vector<size_t>{static_cast<size_t>(d_int)});
      d_row_vector__ = Eigen::Matrix<double, 1, -1>(d_int);
      new (&d_row_vector) Eigen::Map<Eigen::Matrix<double, 1, -1>>(d_row_vector__.data(), d_int);
      
      
      {
        std::vector<local_scalar_t__> d_row_vector_flat__;
        current_statement__ = 22;
        d_row_vector_flat__ = context__.vals_r("d_row_vector");
        current_statement__ = 22;
        pos__ = 1;
        current_statement__ = 22;
        for (int sym1__ = 1; sym1__ <= d_int; ++sym1__) {
          current_statement__ = 22;
          assign(d_row_vector, d_row_vector_flat__[(pos__ - 1)],
            "assigning variable d_row_vector", index_uni(sym1__));
          current_statement__ = 22;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 23;
      transformed_data_real = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 24;
      transformed_data_real = poisson_binomial_lpmf<false>(d_int, d_vector);
      current_statement__ = 25;
      transformed_data_real = poisson_binomial_lpmf<false>(d_int,
                                d_row_vector);
      current_statement__ = 26;
      transformed_data_real = poisson_binomial_lpmf<false>(d_int_array,
                                d_vector);
      current_statement__ = 27;
      transformed_data_real = poisson_binomial_lpmf<false>(d_int_array,
                                d_row_vector);
      current_statement__ = 28;
      validate_non_negative_index("p_vector", "d_int", d_int);
      current_statement__ = 29;
      validate_non_negative_index("p_row_vector", "d_int", d_int);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + d_int + d_int + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "poisson_binomial_lpmf_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ p_real;
      p_real = DUMMY_VAR__;
      
      current_statement__ = 1;
      p_real = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__, -1, 1> p_vector;
      p_vector = Eigen::Matrix<local_scalar_t__, -1, 1>(d_int);
      stan::math::fill(p_vector, DUMMY_VAR__);
      
      current_statement__ = 2;
      p_vector = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                   d_int);
      Eigen::Matrix<local_scalar_t__, 1, -1> p_row_vector;
      p_row_vector = Eigen::Matrix<local_scalar_t__, 1, -1>(d_int);
      stan::math::fill(p_row_vector, DUMMY_VAR__);
      
      current_statement__ = 3;
      p_row_vector = in__.template read<Eigen::Matrix<local_scalar_t__, 1, -1>>(
                       d_int);
      local_scalar_t__ y_p;
      y_p = DUMMY_VAR__;
      
      current_statement__ = 4;
      y_p = in__.template read<local_scalar_t__>();
      local_scalar_t__ transformed_param_real;
      transformed_param_real = DUMMY_VAR__;
      
      current_statement__ = 6;
      transformed_param_real = poisson_binomial_lpmf<false>(d_int, d_vector);
      current_statement__ = 7;
      transformed_param_real = poisson_binomial_lpmf<false>(d_int, p_vector);
      current_statement__ = 8;
      transformed_param_real = poisson_binomial_lpmf<false>(d_int,
                                 d_row_vector);
      current_statement__ = 9;
      transformed_param_real = poisson_binomial_lpmf<false>(d_int,
                                 p_row_vector);
      current_statement__ = 10;
      transformed_param_real = poisson_binomial_lpmf<false>(d_int_array,
                                 d_vector);
      current_statement__ = 11;
      transformed_param_real = poisson_binomial_lpmf<false>(d_int_array,
                                 p_vector);
      current_statement__ = 12;
      transformed_param_real = poisson_binomial_lpmf<false>(d_int_array,
                                 d_row_vector);
      current_statement__ = 13;
      transformed_param_real = poisson_binomial_lpmf<false>(d_int_array,
                                 p_row_vector);
      {
        current_statement__ = 14;
        lp_accum__.add(normal_lpdf<propto__>(y_p, 0, 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "poisson_binomial_lpmf_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double p_real;
      p_real = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      p_real = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double, -1, 1> p_vector;
      p_vector = Eigen::Matrix<double, -1, 1>(d_int);
      stan::math::fill(p_vector, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      p_vector = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                   d_int);
      Eigen::Matrix<double, 1, -1> p_row_vector;
      p_row_vector = Eigen::Matrix<double, 1, -1>(d_int);
      stan::math::fill(p_row_vector, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 3;
      p_row_vector = in__.template read<Eigen::Matrix<local_scalar_t__, 1, -1>>(
                       d_int);
      double y_p;
      y_p = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      y_p = in__.template read<local_scalar_t__>();
      double transformed_param_real;
      transformed_param_real = std::numeric_limits<double>::quiet_NaN();
      
      vars__.emplace_back(p_real);
      for (int sym1__ = 1; sym1__ <= d_int; ++sym1__) {
        vars__.emplace_back(p_vector[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= d_int; ++sym1__) {
        vars__.emplace_back(p_row_vector[(sym1__ - 1)]);
      }
      vars__.emplace_back(y_p);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 6;
      transformed_param_real = poisson_binomial_lpmf<false>(d_int, d_vector);
      current_statement__ = 7;
      transformed_param_real = poisson_binomial_lpmf<false>(d_int, p_vector);
      current_statement__ = 8;
      transformed_param_real = poisson_binomial_lpmf<false>(d_int,
                                 d_row_vector);
      current_statement__ = 9;
      transformed_param_real = poisson_binomial_lpmf<false>(d_int,
                                 p_row_vector);
      current_statement__ = 10;
      transformed_param_real = poisson_binomial_lpmf<false>(d_int_array,
                                 d_vector);
      current_statement__ = 11;
      transformed_param_real = poisson_binomial_lpmf<false>(d_int_array,
                                 p_vector);
      current_statement__ = 12;
      transformed_param_real = poisson_binomial_lpmf<false>(d_int_array,
                                 d_row_vector);
      current_statement__ = 13;
      transformed_param_real = poisson_binomial_lpmf<false>(d_int_array,
                                 p_row_vector);
      if (emit_transformed_parameters__) {
        vars__.emplace_back(transformed_param_real);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double p_real;
      p_real = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      p_real = context__.vals_r("p_real")[(1 - 1)];
      Eigen::Matrix<double, -1, 1> p_vector;
      p_vector = Eigen::Matrix<double, -1, 1>(d_int);
      stan::math::fill(p_vector, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> p_vector_flat__;
        current_statement__ = 2;
        p_vector_flat__ = context__.vals_r("p_vector");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= d_int; ++sym1__) {
          current_statement__ = 2;
          assign(p_vector, p_vector_flat__[(pos__ - 1)],
            "assigning variable p_vector", index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, 1, -1> p_row_vector;
      p_row_vector = Eigen::Matrix<double, 1, -1>(d_int);
      stan::math::fill(p_row_vector, std::numeric_limits<double>::quiet_NaN());
      
      
      {
        std::vector<local_scalar_t__> p_row_vector_flat__;
        current_statement__ = 3;
        p_row_vector_flat__ = context__.vals_r("p_row_vector");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= d_int; ++sym1__) {
          current_statement__ = 3;
          assign(p_row_vector, p_row_vector_flat__[(pos__ - 1)],
            "assigning variable p_row_vector", index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      double y_p;
      y_p = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      y_p = context__.vals_r("y_p")[(1 - 1)];
      vars__.emplace_back(p_real);
      for (int sym1__ = 1; sym1__ <= d_int; ++sym1__) {
        vars__.emplace_back(p_vector[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= d_int; ++sym1__) {
        vars__.emplace_back(p_row_vector[(sym1__ - 1)]);
      }
      vars__.emplace_back(y_p);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"p_real", "p_vector", "p_row_vector",
      "y_p", "transformed_param_real"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(d_int)},
      std::vector<size_t>{static_cast<size_t>(d_int)}, std::vector<size_t>{
      }, std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "p_real");
    for (int sym1__ = 1; sym1__ <= d_int; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_vector" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= d_int; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_row_vector" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "y_p");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "transformed_param_real");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "p_real");
    for (int sym1__ = 1; sym1__ <= d_int; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_vector" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= d_int; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_row_vector" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "y_p");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "transformed_param_real");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"p_real\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_vector\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(d_int) + "},\"block\":\"parameters\"},{\"name\":\"p_row_vector\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(d_int) + "},\"block\":\"parameters\"},{\"name\":\"y_p\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"transformed_param_real\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"p_real\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_vector\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(d_int) + "},\"block\":\"parameters\"},{\"name\":\"p_row_vector\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(d_int) + "},\"block\":\"parameters\"},{\"name\":\"y_p\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"transformed_param_real\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}

using stan_model = poisson_binomial_lpmf_model_namespace::poisson_binomial_lpmf_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return poisson_binomial_lpmf_model_namespace::profiles__;
}

#endif


