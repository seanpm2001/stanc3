  $ ../../../../../install/default/bin/stanc --auto-format good_complex.stan
functions {
  complex foo() {
    return to_complex();
  }
  real foo1(complex z) {
    return 1.0;
  }
  complex foo2(real r) {
    return to_complex(r);
  }
  complex foo3(complex z) {
    return z;
  }
  array[] complex foo4() {
    return {to_complex(), to_complex()};
  }
  real foo5(array[] complex z) {
    return 1.0;
  }
  array[] complex foo6(real r) {
    return {to_complex(r), to_complex(r, r)};
  }
  array[] complex foo7(array[] complex z) {
    return z;
  }
}
data {
  int<lower=0> N;
  complex d_complex;
  array[N] complex d_complex_array;
  array[N, 2] complex d_complex_array_2d;
  array[N, 2, 3] complex d_complex_array_3d;
}
transformed data {
  complex td_complex = d_complex;
  td_complex = 1;
  td_complex = to_complex(1, 2);
  array[N] complex td_complex_array = d_complex_array;
  array[2, 3] complex td_complex_array_2d;
  array[2, 3, 4] complex td_complex_array_3d;
  for (td_i in 1 : 2) {
    for (td_j in 1 : 3) {
      for (td_k in 1 : 4) {
        td_complex_array_3d[td_i, td_j, td_k] = to_complex(1, 2.2);
      }
    }
  }
  real td_r = get_real(td_complex);
  real td_i = get_imag(td_complex);
}
parameters {
  complex p_complex;
  array[N] complex p_complex_array;
  array[N, 2] complex p_complex_array_2d;
  array[N, 2, 3] complex p_complex_array_3d;
}
transformed parameters {
  complex tp_complex = p_complex;
  tp_complex = 1;
  tp_complex = to_complex(1, 2);
  array[N] complex tp_complex_array = p_complex_array;
  array[2, 3] complex tp_complex_array_2d;
  array[2, 3, 4] complex tp_complex_array_3d;
  for (tp_i in 1 : 2) {
    for (tp_j in 1 : 3) {
      for (tp_k in 1 : 4) {
        tp_complex_array_3d[tp_i, tp_j, tp_k] = to_complex(1, 2.2);
      }
    }
  }
  real tp_r = get_real(tp_complex);
  real tp_i = get_imag(tp_complex);
}
model {
  abs(p_complex) ~ normal(0, 1);
}
generated quantities {
  complex gq_complex;
  array[2] complex gq_complex_array;
  array[2, 3] complex gq_complex_array_2d = {{1, 2, 3},
                                             {to_complex(), to_complex(
                                              1.1), to_complex(1, 2.1)}};
  array[2, 3, 4] complex gq_complex_array_3d;
  gq_complex = 3;
  gq_complex_array[1] = to_complex(5.1, 6);
  gq_complex = foo();
  real gq_r = foo1(gq_complex);
  gq_complex = foo2(gq_r);
  gq_complex = foo3(gq_complex);
  gq_complex_array = foo4();
  gq_r = foo5(gq_complex_array);
  gq_complex_array = foo6(gq_r);
  gq_complex_array = foo7(gq_complex_array);
  
  // test imaginary literal
  complex zi = 1 + 3.14i;
  zi = zi * 0i;
  complex yi = to_complex(0, 1.1) + to_complex(0.0, 2.2) + to_complex();
  real x = get_real(3i - 40e-3i);
}

  $ ../../../../../install/default/bin/stanc --auto-format good_const.stan
transformed data {
  real y;
  y = pi();
}
model {
  
}

  $ ../../../../../install/default/bin/stanc --auto-format good_cov.stan
data {
  array[10] vector[5] y;
  array[10] vector[5] mu;
}
parameters {
  array[10] cov_matrix[5] Sigma;
}
model {
  for (i in 1 : 10) 
    y[i] ~ multi_normal(mu[i], Sigma[i]);
}

  $ ../../../../../install/default/bin/stanc --auto-format good_fun_name.stan
parameters {
  real e;
  real pi;
  real sqrt2;
  real log2;
  real log10;
  real not_a_number;
  real positive_infinity;
  real negative_infinity;
  real epsilon;
  real negative_epsilon;
}
model {
  e ~ normal(0, 1);
}

  $ ../../../../../install/default/bin/stanc --auto-format good_funs.stan
transformed data {
  real x;
  real y;
  real z;
  int n;
  
  z = ((n) ? x : y);
  
  z = lchoose(x, y);
}
model {
  
}

  $ ../../../../../install/default/bin/stanc --auto-format good_intercept_var.stan
data {
  int<lower=0> m1; // make sure didn't mess up spacing
  int<lower=0> m2;
  int<lower=0> m3;
  int<lower=0> m4;
}
transformed data {
  int intercept;
  intercept = 5; // failed in 1.0.2
}
model {
  
}

  $ ../../../../../install/default/bin/stanc --auto-format good_local_var_array_size.stan
data {
  array[5] int M;
}
transformed data {
  array[2] int N;
  N[1] = 1;
  N[2] = 4;
}
parameters {
  real y;
}
model {
  y ~ normal(0, 1);
  
  for (i in 1 : 10) {
    array[i] real x; // should allow i here.
    for (j in 1 : i) 
      x[j] = j * j;
  }
  
  for (i in 1 : 5) {
    vector[i] v;
    row_vector[i] rv;
    for (j in 1 : 10) {
      matrix[i, j] m;
    }
  }
  
  for (i in 1 : 5) {
    array[M[i]] real x; // data
  }
  
  for (i in 1 : 2) {
    array[N[i]] real x; // tdata
  }
}

  $ ../../../../../install/default/bin/stanc --auto-format good_matrix_ops.stan
transformed data {
  matrix[5, 5] A;
  matrix[5, 5] B;
  matrix[5, 5] C;
  vector[5] b;
  vector[5] x;
  
  row_vector[5] c;
  row_vector[5] y;
  
  C = A / B;
  C = B \ A;
  
  x = A \ b;
  
  y = c / A;
  
  A = A ./ A;
  
  A = A .* A;
  
  x = x ./ x;
  x = x .* x;
  
  y = y ./ y;
  y = y .* y;
}
model {
  
}

  $ ../../../../../install/default/bin/stanc --auto-format good_semicolons.stan
data {
  ;
  real x;
  ;
  ;
}
transformed data {
  real x_new = 0;
  ;
}
parameters {
  real y;
  ;
  ;
}
transformed parameters {
  real z;
  ;
  ;
  ;
}
model {
  ;
  ;
  int i;
  ;
}
generated quantities {
  ;
}

  $ ../../../../../install/default/bin/stanc --auto-format good_trunc.stan
data {
  real y;
}
model {
  y ~ normal(0, 1) T[-1, 1];
  y ~ normal(0, 1) T[0, ];
  y ~ normal(0, 1) T[ , 0];
  y ~ normal(0, 1);
}

  $ ../../../../../install/default/bin/stanc --auto-format good_vars.stan
data {
  real a;
}
transformed data {
  real b;
  b = 1.0;
  b = a + b + 1.0;
  {
    real b_local; // init to 0 locally
    b = a + b + b_local;
    b_local = a + b + b_local;
  }
}
parameters {
  real c;
}
transformed parameters {
  real d;
  d = 1.0;
  d = a + b + c + d;
  {
    real d_local;
    d = a + b + c + d + d_local;
    d_local = a + b + c + d + d_local;
  }
}
model {
  real e_local;
  e_local = 1.0;
  e_local = a + b + c + d + e_local;
  {
    real f_local;
    f_local = 1.0;
    e_local = a + b + c + d + e_local + f_local;
    f_local = a + b + c + d + e_local + f_local;
  }
}
generated quantities {
  real g;
  g = 1.0;
  g = a + b + c + d + g;
  {
    real g_local;
    g_local = 1.0;
    g = a + b + c + d + g + g_local;
    g_local = a + b + c + d + g + g_local;
  }
}

  $ ../../../../../install/default/bin/stanc --auto-format good_vec_constraints.stan
data {
  vector<lower=0>[2] v0;
  vector<upper=1>[2] v1;
  vector<lower=0, upper=1>[2] v01;
  
  row_vector<lower=0>[3] rv0;
  row_vector<upper=1>[3] rv1;
  row_vector<lower=0, upper=1>[3] rv01;
  
  matrix<lower=0>[2, 3] m0;
  matrix<upper=1>[2, 3] m1;
  matrix<lower=0, upper=1>[2, 3] m01;
}
model {
  0 ~ bernoulli(0.5);
}

  $ ../../../../../install/default/bin/stanc --auto-format print_reject_function_gq.stan
functions {
  void foo(real x) {
    print("quitting time");
    reject("user-specified rejection");
  }
}
transformed data {
  int x;
  print("In transformed data");
}
parameters {
  real y;
}
transformed parameters {
  print("In transformed parameters");
}
model {
  print("In model block.");
  y ~ normal(0, 1);
}
generated quantities {
  real v;
  print("In generated quantities");
  foo(v);
}

  $ ../../../../../install/default/bin/stanc --auto-format print_reject_function_model.stan
functions {
  void foo(real x) {
    print("quitting time");
    reject("user-specified rejection");
  }
}
transformed data {
  print("In transformed data");
}
parameters {
  real y;
}
transformed parameters {
  print("In transformed parameters");
}
model {
  real v;
  print("In model block.");
  y ~ normal(0, 1);
  foo(v);
}
generated quantities {
  print("In generated quantities");
}

  $ ../../../../../install/default/bin/stanc --auto-format print_reject_function_tdata.stan
functions {
  void foo(real x) {
    print("quitting time");
    reject("user-specified rejection");
  }
}
transformed data {
  real v;
  print("In transformed data");
  foo(v);
}
parameters {
  real y;
}
transformed parameters {
  print("In transformed parameters");
}
model {
  print("In model block.");
  y ~ normal(0, 1);
}
generated quantities {
  print("In generated quantities");
}

  $ ../../../../../install/default/bin/stanc --auto-format print_reject_function_tparams.stan
functions {
  void foo(real x) {
    print("quitting time");
    reject("user-specified rejection");
  }
}
transformed data {
  print("In transformed data");
}
parameters {
  real y;
}
transformed parameters {
  real v;
  print("In transformed parameters");
  foo(v);
}
model {
  print("In model block.");
  y ~ normal(0, 1);
}
generated quantities {
  print("In generated quantities");
}

  $ ../../../../../install/default/bin/stanc --auto-format print_reject_gq_block.stan
transformed data {
  print("In transformed data");
}
parameters {
  real y;
}
transformed parameters {
  print("In transformed parameters");
}
model {
  print("In model block.");
  y ~ normal(0, 1);
}
generated quantities {
  print("In generated quantities");
  print("quitting time");
  reject("QUIT");
}

  $ ../../../../../install/default/bin/stanc --auto-format print_reject_model_block.stan
transformed data {
  print("In transformed data");
}
parameters {
  real y;
}
transformed parameters {
  print("In transformed parameters");
}
model {
  print("In model block.");
  y ~ normal(0, 1);
  print("quitting time");
  reject("user-specified rejection");
}
generated quantities {
  print("In generated quantities");
}

  $ ../../../../../install/default/bin/stanc --auto-format print_reject_tdata_block.stan
transformed data {
  print("In transformed data");
  print("quitting time");
  reject("QUIT");
}
parameters {
  real y;
}
transformed parameters {
  print("In transformed parameters");
}
model {
  print("In model block.");
  y ~ normal(0, 1);
}
generated quantities {
  print("In generated quantities");
}

  $ ../../../../../install/default/bin/stanc --auto-format print_reject_tparams_block.stan
transformed data {
  print("In transformed data");
}
parameters {
  real y;
}
transformed parameters {
  print("In transformed parameters");
  print("quitting time");
  reject("QUIT");
}
model {
  print("In model block.");
  y ~ normal(0, 1);
}
generated quantities {
  print("In generated quantities");
}

  $ ../../../../../install/default/bin/stanc --auto-format reject_func_call_generated_quantities.stan
functions {
  void foo(real x) {
    reject("user-specified rejection");
  }
}
parameters {
  real y;
}
model {
  y ~ normal(0, 1);
}
generated quantities {
  foo(y);
}

  $ ../../../../../install/default/bin/stanc --auto-format reject_func_call_model.stan
functions {
  void foo(real x) {
    reject("user-specified rejection");
  }
}
parameters {
  real y;
}
model {
  foo(y);
  y ~ normal(0, 1);
}

  $ ../../../../../install/default/bin/stanc --auto-format reject_func_call_transformed_data.stan
functions {
  void foo(real x) {
    reject("user-specified rejection");
  }
}
transformed data {
  real<lower=0> x;
  foo(x);
}
parameters {
  real y;
}
model {
  y ~ normal(0, 1);
}

  $ ../../../../../install/default/bin/stanc --auto-format reject_func_call_transformed_parameters.stan
functions {
  void foo_bar() {
    reject("user-specified rejection");
  }
}
parameters {
  real y;
}
transformed parameters {
  real x;
  foo_bar();
}
model {
  y ~ normal(0, 1);
}

  $ ../../../../../install/default/bin/stanc --auto-format reject_generated_quantities.stan
parameters {
  real y;
}
model {
  y ~ normal(0, 1);
}
generated quantities {
  real<lower=0> x;
  reject("user-specified rejection");
}

  $ ../../../../../install/default/bin/stanc --auto-format reject_model.stan
data {
  
}
parameters {
  array[2] real<lower=-10, upper=10> y;
}
transformed parameters {
  array[2] real<lower=0> z;
  z[1] = exp(y[1]);
  z[2] = exp(y[2]) * exp(y[1]);
}
model {
  y ~ normal(0, 1);
  reject("user-specified rejection");
}

  $ ../../../../../install/default/bin/stanc --auto-format reject_mult_args.stan
functions {
  real relative_diff(real x, real y, real max_, real min_) {
    real abs_diff;
    real avg_scale;
    abs_diff = fabs(x - y);
    avg_scale = (fabs(x) + fabs(y)) / 2;
    if ((abs_diff / avg_scale) > max_) 
      reject("user-specified rejection, difference above ", max_, " x:", x,
             " y:", y);
    if ((abs_diff / avg_scale) < min_) 
      reject("user-specified rejection, difference below ", min_, " x:", x,
             " y:", y);
    return abs_diff / avg_scale;
  }
}
transformed data {
  real a = -9.0;
  real b = -1.0;
  real mx = 1.2;
  real mn = 1.1;
}
parameters {
  real y;
}
model {
  real c;
  c = relative_diff(a, b, mx, mn);
  y ~ normal(0, 1);
}

  $ ../../../../../install/default/bin/stanc --auto-format reject_transformed_data.stan
transformed data {
  real<lower=0> x;
  reject("user-specified rejection");
}
parameters {
  real y;
}
model {
  y ~ normal(0, 1);
}
generated quantities {
  print("generating quantities");
}

  $ ../../../../../install/default/bin/stanc --auto-format reject_transformed_parameters.stan
parameters {
  real y;
}
transformed parameters {
  real<lower=0> x;
  reject("user-specified rejection");
}
model {
  y ~ normal(0, 1);
}
generated quantities {
  print("generating quantities");
}

  $ ../../../../../install/default/bin/stanc --auto-format test_lp.stan
parameters {
  array[2] real<lower=-10, upper=10> y;
}
transformed parameters {
  array[2] real<lower=0> z;
  z[1] = exp(y[1]);
  z[2] = exp(y[2]) * exp(y[1]);
}
model {
  y ~ normal(0, 1);
}
generated quantities {
  int xgq;
  xgq = 2713;
}

